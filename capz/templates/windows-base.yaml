apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-win
  namespace: default
spec:
  template:
    spec:
      files:
      - contentFrom:
          secret:
            key: worker-node-azure.json
            name: ${CLUSTER_NAME}-md-win-azure-json
        owner: root:root
        path: c:/k/azure.json
        permissions: "0644"
      - content: |-
          Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico.exe
          Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico-ipam.exe
        path: C:/defender-exclude-calico.ps1
        permissions: "0744"
      - content: |
          # /tmp is assumed created and required for upstream e2e tests to pass
          New-Item -ItemType Directory -Force -Path C:\tmp\
        path: C:/create-temp-folder.ps1
        permissions: "0744"
      - content: |
          $ErrorActionPreference = 'Stop'
          $$CONTAINERD_URL="${WINDOWS_CONTAINERD_URL}"
          if($$CONTAINERD_URL -ne ""){
            # Kubelet service depends on contianerd service so make a best effort attempt to stop it
            Stop-Service kubelet -Force -ErrorAction SilentlyContinue
            Stop-Service containerd -Force
            echo "downloading containerd: $$CONTAINERD_URL"
            # If the URL is set to "latest", we will query the GitHub API for the latest containerd release
            if ($$CONTAINERD_URL.ToLower() -eq "latest") {
              # Query GitHub API for latest containerd release for Windows
              $githubApiUrl = "https://api.github.com/repos/containerd/containerd/releases/latest"
              Write-Output "Fetching latest containerd release from GitHub..."
              $releaseInfo = Invoke-RestMethod -Uri $githubApiUrl -UseBasicParsing
              $asset = $releaseInfo.assets | Where-Object { $_.name -like "*windows-amd64.tar.gz" } | Select-Object -First 1
              if ($null -eq $asset) {
                Write-Output "Could not find a Windows containerd release asset in the latest GitHub release."
                exit 1
              }
              $$CONTAINERD_URL = $asset.browser_download_url
            }
            curl.exe --retry 10 --retry-delay 5 -L "$$CONTAINERD_URL" --output "c:/k/containerd.tar.gz"
            # Log service state and if any files under containerd director are locked
            Get-Service -Name containerd, kubelet
            $dir = "c:/Program Files/containerd"
            $files = Get-ChildItem $dir -Recurse
            Write-Output "Checking if any files under $dir are locked"
            foreach ($file in $files) {
                $f = $file.FullName
                Write-output "$f"
                $fi = New-Object System.IO.FileInfo $f
                try {
                    $fStream = $fi.Open([System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::None)
                    if ($fStream) {
                        $fStream.Close()
                    }
                } catch {
                    Write-Output "Unable to open file: $f"
                }
            }
            Write-Output "Extracting new containerd binaries"
            tar.exe -zxvf c:/k/containerd.tar.gz -C "c:/Program Files/containerd" --strip-components 1
            # Check if kube-log-runner.exe exists
            if (Test-Path $kubeloggerPath) {
              Write-Output "Recreating containerd service with kube-log-runner..."
              $logPath = "\var\log\containerd"
              # Check if directory exists
              if (-Not (Test-Path -Path $logPath -PathType Container)) {
                Write-Host "Creating log directory: $logPath"
                New-Item -ItemType Directory -Path $logPath -Force | Out-Null
              } else {
                Write-Host "Log directory already exists: $logPath"
              }
              $ContainerdCommandLine = 'c:\k\kube-log-runner.exe --log-file=/var/log/containerd/containerd.log "c:\Program Files\containerd\containerd.exe" --register-service'
              Write-Output "Containerd command line: $ContainerdCommandLine"
              # Stop and delete the existing containerd service
              Stop-Service -Name 'containerd' -Force -ErrorAction SilentlyContinue
              $null = sc.exe delete containerd
              # Wait for service to be fully deleted
              $serviceCreated = $false
              for ($i = 0; $i -lt 20; $i++) {
                  $service = Get-Service -Name containerd -ErrorAction SilentlyContinue
                  if ($null -eq $service) {
                      Write-Host "containerd service deleted successfully, recreating with kubelogger"
                      cmd.exe /c $ContainerdCommandLine
                      Start-Service Containerd
                      Write-Output "Successfully started containerd service with kubelogger"
                      $serviceCreated = $true
                      break
                  }
                  else {
                      Write-Host "Waiting for containerd service to be fully deleted... (attempt $($i + 1)/20)"
                  }
                  Start-Sleep -Seconds 1
              }
              if (-not $serviceCreated) {
                  Write-Error "Failed to delete containerd service after 20 attempts"
              }
            } else {
                Write-Output "Starting containerd service without kube-log-runner..."
                Start-Service containerd
            }
          }
          containerd.exe --version
          containerd-shim-runhcs-v1.exe --version
        path: C:/replace-containerd.ps1
        permissions: "0744"
      - content: |
          $ErrorActionPreference = "Stop"
          $FileContent = Get-Content -Path "$env:SYSTEMDRIVE/var/lib/kubelet/kubeadm-flags.env"
          $kubeAdmArgs = $FileContent.TrimStart('KUBELET_KUBEADM_ARGS=').Trim('"')

          # Set the path to your kubelet config file
          $configFile = "$env:SYSTEMDRIVE/var/lib/kubelet/config.yaml"
          $content = Get-Content -Path $configFile
          # Check if NodeLogQuery feature gate was specified for the cluster and if so, also enable it via kubelet config
          if ($kubeAdmArgs.Contains("NodeLogQuery=true")) {
              $content += "enableSystemLogQuery: true"
          }
          if ($kubeAdmArgs.Contains("WindowsGracefulNodeShutdown=true")) {
            # Remove existing lines that match the settings
            $content = $content | Where-Object { $_ -notmatch "^shutdownGracePeriod:" -and $_ -notmatch "^shutdownGracePeriodCriticalPods:" }
            # Append new values at the end
            $content += "shutdownGracePeriod: 1m"
            $content += "shutdownGracePeriodCriticalPods: 20s"
          }

          # Write the updated content back to the file
          $content | Set-Content -Path $configFile -Encoding ascii

        path: C:/updateKubeletConfig.ps1
        permissions: "0744"
      - content: |
          # This script restarts the kubelet service.
          # It supports both nssm and Windows service configurations,
          # ensuring a smooth transition between service managers without interruption.
          # This script will eventually be removed once nssm is no longer used.
          $scriptPath = "$env:SYSTEMDRIVE/k/RestartKubelet.ps1"
          if (Test-Path $scriptPath) {
              Write-Host "Found RestartKubelet.ps1, executing..."
              & $scriptPath
          } else {
              Write-Host "RestartKubelet.ps1 not found. Running fallback command..."
              & "$env:SYSTEMDRIVE\k\nssm.exe" set kubelet start SERVICE_AUTO_START
          }
        path: C:/KubeletRestart_nssm_sc.ps1
        permissions: "0744"
      - content: |
          mkdir -Force c:/localdumps
          reg.exe add "HKLM\Software\Microsoft\Windows\Windows Error Reporting\LocalDumps" /V DumpCount /t REG_DWORD /d 50 /f
          reg.exe add "HKLM\Software\Microsoft\Windows\Windows Error Reporting\LocalDumps" /V DumpType /t REG_DWORD /d 2 /f
          reg.exe add "HKLM\Software\Microsoft\Windows\Windows Error Reporting\LocalDumps" /V DumpFolder /t REG_EXPAND_SZ /d "c:/LocalDumps" /f
          # Enable sftp so we can copy crash dump files during log collection of stfp
          $sshd_config = "$env:ProgramData\ssh\sshd_config"
          if (-not (Test-Path $sshd_config)) { mkdir -Force $sshd_config }
          Add-Content -Path $sshd_config "Subsystem sftp              sftp-server.exe"
          sc.exe stop sshd
          sc.exe start sshd
        path: C:/collect-hns-crashes.ps1
        permissions: "0744"
      - content: |
          ${AZURE_SSH_PUBLIC_KEY:=""}
        owner: root:root
        path: C:/ProgramData/ssh/administrators_authorized_keys
        permissions: "0640"
      joinConfiguration:
        nodeRegistration:
          criSocket: npipe:////./pipe/containerd-containerd
          kubeletExtraArgs:
            cloud-provider: external
            image-credential-provider-config: /var/lib/kubelet/credential-provider-config.yaml
            image-credential-provider-bin-dir: /var/lib/kubelet/credential-provider
            feature-gates: ${NODE_FEATURE_GATES:-""}
            v: "2"
            windows-priorityclass: ABOVE_NORMAL_PRIORITY_CLASS
          name: '{{ ds.meta_data["local_hostname"] }}'
      postKubeadmCommands:
      - powershell C:/updateKubeletConfig.ps1
      - powershell C:/KubeletRestart_nssm_sc.ps1
      - powershell C:/defender-exclude-calico.ps1
      preKubeadmCommands:
      - powershell C:/create-temp-folder.ps1
      - powershell C:/replace-containerd.ps1
      - powershell C:/collect-hns-crashes.ps1
      users:
      - groups: Administrators
        name: capi
        sshAuthorizedKeys:
        - ${AZURE_SSH_PUBLIC_KEY:=""}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cni: ${CLUSTER_NAME}-calico
    containerd-logger: enabled
    csi-proxy: enabled
    metrics-server: enabled
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: ${CLUSTER_NAME}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-win
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WINDOWS_WORKER_MACHINE_COUNT:-2}
  selector: {}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: ${CLUSTER_NAME}-md-win
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: ${CLUSTER_NAME}-md-win
      version: ${KUBERNETES_VERSION}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          feature-gates: ${API_SERVER_FEATURE_GATES:-""}
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-provider: external
          cluster-name: ${CLUSTER_NAME}
          v: "4"
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
      scheduler:
        extraArgs:
          feature-gates: ${SCHEDULER_FEATURE_GATES:-""}
      kubernetesVersion: ci/${CI_VERSION}
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    - content: |
        #!/bin/bash
        set -o nounset
        set -o pipefail
        set -o errexit
        if grep -q "NodeLogQuery=true" /var/lib/kubelet/kubeadm-flags.env; then
          [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""
          echo "* adding enableSystemLogQuery: true to kubelet config"
          printf "enableSystemLogQuery: true\n" | $${SUDO} tee --append /var/lib/kubelet/config.yaml
          $${SUDO} systemctl restart kubelet
        fi
      owner: root:root
      path: /tmp/node-log-query-kubelet-config.sh
      permissions: "0744"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          feature-gates: ${NODE_FEATURE_GATES:-""}
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          feature-gates: ${NODE_FEATURE_GATES:-""}
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    postKubeadmCommands:
    - bash -c /tmp/node-log-query-kubelet-config.sh
    preKubeadmCommands: []
    useExperimentalRetryJoin: true
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT:-1}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  additionalTags:
    buildProvenance: ${BUILD_PROVENANCE}
    creationTimestamp: ${TIMESTAMP}
    jobName: ${JOB_NAME}
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: cluster-identity
  location: ${AZURE_LOCATION}
  networkSpec:
    subnets:
    - name: control-plane-subnet
      role: control-plane
    - name: node-subnet
      natGateway:
        name: node-natgateway
      role: node
    vnet:
      name: ${AZURE_VNET_NAME:=${CLUSTER_NAME}-vnet}
  resourceGroup: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: cluster-identity
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: ${MANAGEMENT_IDENTITY}
  tenantID: ${AZURE_TENANT_ID}
  resourceID: test-this-doesnt-matter
  type: UserAssignedMSI
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      identity: UserAssigned
      image:
        computeGallery:
          name: "capi-ubun2-2404"
          gallery: "ClusterAPI-f72ceb4f-5159-4c26-a0fe-2ea738f0d019"
          version: "${IMAGE_VERSION:=latest}"
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      userAssignedIdentities:
      - providerID:  ${USER_IDENTITY}
      vmSize: Standard_D2s_v3
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  annotations:
    runtime: containerd
  name: ${CLUSTER_NAME}-md-win
  namespace: default
spec:
  template:
    metadata:
      annotations:
        runtime: containerd
    spec:
      identity: UserAssigned
      image:
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: Premium_LRS
        osType: Windows
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      userAssignedIdentities:
      - providerID: ${USER_IDENTITY}
      vmSize: ${AZURE_NODE_MACHINE_TYPE:-"Standard_D4s_v3"}
