apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-win
  namespace: default
spec:
  template:
    spec:
      files:
      - contentFrom:
          secret:
            key: worker-node-azure.json
            name: ${CLUSTER_NAME}-md-win-azure-json
        owner: root:root
        path: c:/k/azure.json
        permissions: "0644"
      - content: |-
          Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico.exe
          Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico-ipam.exe
        path: C:/defender-exclude-calico.ps1
        permissions: "0744"
      - content: |
          # /tmp is assumed created and required for upstream e2e tests to pass
          New-Item -ItemType Directory -Force -Path C:\tmp\
        path: C:/create-temp-folder.ps1
        permissions: "0744"
      - content: |
          $ErrorActionPreference = 'Stop'
          $$CONTAINERD_URL="${WINDOWS_CONTAINERD_URL}"
          if($$CONTAINERD_URL -ne ""){
            # Kubelet service depends on contianerd service so make a best effort attempt to stop it
            Stop-Service kubelet -Force -ErrorAction SilentlyContinue
            Stop-Service containerd -Force
            echo "downloading containerd: $$CONTAINERD_URL"
            curl.exe --retry 10 --retry-delay 5 -L "$$CONTAINERD_URL" --output "c:/k/containerd.tar.gz"
            # Log service state and if any files under containerd director are locked
            Get-Service -Name containerd, kubelet
            $dir = "c:/Program Files/containerd"
            $files = Get-ChildItem $dir -Recurse
            Write-Output "Checking if any files under $dir are locked"
            foreach ($file in $files) {
                $f = $file.FullName
                Write-output "$f"
                $fi = New-Object System.IO.FileInfo $f
                try {
                    $fStream = $fi.Open([System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::None)
                    if ($fStream) {
                        $fStream.Close()
                    }
                } catch {
                    Write-Output "Unable to open file: $f"
                }
            }
            Write-Output "Extracting new containerd binaries"
            tar.exe -zxvf c:/k/containerd.tar.gz -C "c:/Program Files/containerd" --strip-components 1

            Start-Service containerd
          }
          containerd.exe --version
          containerd-shim-runhcs-v1.exe --version
        path: C:/replace-containerd.ps1
        permissions: "0744"
      - content: |
          $ErrorActionPreference = "Stop"
          # Check if NodeLogQuery feature gate was specified for the cluster and if so, also enable it via kubelet config
          $kubeletEnvContents = Get-Content -Path "/var/lib/kubelet/kubeadm-flags.env"
          if ($kubeletEnvContents.Contains("NodeLogQuery=true")) {
              Add-Content -Path "$env:SYSTEMDRIVE/var/lib/kubelet/config.yaml" -Value "enableSystemLogQuery: true" -Encoding ascii -NoNewLine
              nssm restart kubelet
          }
        path: C:/NodeLogQueryKubeletConfig.ps1
        permissions: "0744"
      - content: |
          mkdir -Force c:/localdumps
          reg.exe add "HKLM\Software\Microsoft\Windows\Windows Error Reporting\LocalDumps" /V DumpCount /t REG_DWORD /d 50 /f
          reg.exe add "HKLM\Software\Microsoft\Windows\Windows Error Reporting\LocalDumps" /V DumpType /t REG_DWORD /d 2 /f
          reg.exe add "HKLM\Software\Microsoft\Windows\Windows Error Reporting\LocalDumps" /V DumpFolder /t REG_EXPAND_SZ /d "c:/LocalDumps" /f
          # Enable sftp so we can copy crash dump files during log collection of stfp
          $sshd_config = "$env:ProgramData\ssh\sshd_config"
          if (-not (Test-Path $sshd_config)) { mkdir -Force $sshd_config }
          Add-Content -Path $sshd_config "Subsystem sftp              sftp-server.exe"
          sc.exe stop sshd
          sc.exe start sshd
        path: C:/collect-hns-crashes.ps1
        permissions: "0744"
      - content: |
          ${AZURE_SSH_PUBLIC_KEY:=""}
        owner: root:root
        path: C:/ProgramData/ssh/administrators_authorized_keys
        permissions: "0640"
      joinConfiguration:
        nodeRegistration:
          criSocket: npipe:////./pipe/containerd-containerd
          kubeletExtraArgs:
            cloud-provider: external
            image-credential-provider-config: /var/lib/kubelet/credential-provider-config.yaml
            image-credential-provider-bin-dir: /var/lib/kubelet/credential-provider
            feature-gates: ${NODE_FEATURE_GATES:-""}
            v: "2"
            windows-priorityclass: ABOVE_NORMAL_PRIORITY_CLASS
          name: '{{ ds.meta_data["local_hostname"] }}'
      postKubeadmCommands:
      - powershell C:/NodeLogQueryKubeletConfig.ps1
      - nssm set kubelet start SERVICE_AUTO_START
      - powershell C:/defender-exclude-calico.ps1
      preKubeadmCommands:
      - powershell C:/create-temp-folder.ps1
      - powershell C:/replace-containerd.ps1
      - powershell C:/collect-hns-crashes.ps1
      users:
      - groups: Administrators
        name: capi
        sshAuthorizedKeys:
        - ${AZURE_SSH_PUBLIC_KEY:=""}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cni: ${CLUSTER_NAME}-calico
    containerd-logger: enabled
    csi-proxy: enabled
    metrics-server: enabled
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: ${CLUSTER_NAME}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-win
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WINDOWS_WORKER_MACHINE_COUNT:-2}
  selector: {}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: ${CLUSTER_NAME}-md-win
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: ${CLUSTER_NAME}-md-win
      version: ${KUBERNETES_VERSION}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          feature-gates: "VolumeAttributesClass=true"
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-provider: external
          cluster-name: ${CLUSTER_NAME}
          v: "4"
          feature-gates: "VolumeAttributesClass=true"
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
      scheduler:
        extraArgs:
          feature-gates: ${SCHEDULER_FEATURE_GATES:-""}
      kubernetesVersion: ci/${CI_VERSION}
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    - content: |
        #!/bin/bash
        set -o nounset
        set -o pipefail
        set -o errexit
        if grep -q "NodeLogQuery=true" /var/lib/kubelet/kubeadm-flags.env; then
          [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""
          echo "* adding enableSystemLogQuery: true to kubelet config"
          printf "enableSystemLogQuery: true\n" | $${SUDO} tee --append /var/lib/kubelet/config.yaml
          $${SUDO} systemctl restart kubelet
        fi
      owner: root:root
      path: /tmp/node-log-query-kubelet-config.sh
      permissions: "0744"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          feature-gates: ${NODE_FEATURE_GATES:-""}
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          feature-gates: ${NODE_FEATURE_GATES:-""}
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    postKubeadmCommands:
    - bash -c /tmp/node-log-query-kubelet-config.sh
    preKubeadmCommands: []
    useExperimentalRetryJoin: true
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT:-1}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  additionalTags:
    buildProvenance: ${BUILD_PROVENANCE}
    creationTimestamp: ${TIMESTAMP}
    jobName: ${JOB_NAME}
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: cluster-identity
  location: ${AZURE_LOCATION}
  networkSpec:
    subnets:
    - name: control-plane-subnet
      role: control-plane
    - name: node-subnet
      natGateway:
        name: node-natgateway
      role: node
    vnet:
      name: ${AZURE_VNET_NAME:=${CLUSTER_NAME}-vnet}
  resourceGroup: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: cluster-identity
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: ${MANAGEMENT_IDENTITY}
  tenantID: ${AZURE_TENANT_ID}
  resourceID: test-this-doesnt-matter
  type: UserAssignedMSI
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      identity: UserAssigned
      image:
        computeGallery:
          name: "capi-ubun2-2404"
          gallery: "ClusterAPI-f72ceb4f-5159-4c26-a0fe-2ea738f0d019"
          version: "${IMAGE_VERSION:=latest}"
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      userAssignedIdentities:
      - providerID:  ${USER_IDENTITY}
      vmSize: Standard_D2s_v3
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  annotations:
    runtime: containerd
  name: ${CLUSTER_NAME}-md-win
  namespace: default
spec:
  template:
    metadata:
      annotations:
        runtime: containerd
    spec:
      identity: UserAssigned
      image:
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: Premium_LRS
        osType: Windows
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      userAssignedIdentities:
      - providerID: ${USER_IDENTITY}
      vmSize: ${AZURE_NODE_MACHINE_TYPE:-"Standard_D4s_v3"}
